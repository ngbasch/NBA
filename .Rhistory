3+4
install.packages("tidyverse")
library(tidyverse)
###############################################################################
###
###   PURPOSE:
###
###############################################################################
### Set Environment -------------------------
# Clear the environment
rm(list=ls())
# Set working directory
path <- "C:\\Users\\nated\\Documents\\Documents_NB\\Projects\\Betting"
options(stringsAsFactors = F)
setwd(path)
# Load packages
library(tidyverse)
library(janitor)
library(plotly)
library(tidylog)
library(forcats)
# Set constants
### Import Data -------------------------------------------------------------------------------------------------
### CSV
load ("SBR Workflow/Output/sbr_long_pin.Rda")
sbr_long_pin%>%
filter(bet == "ml",
yearSeason == 2020
)%>%
ggplot(aes(x = dateGame, y = ratio, colour = outcomeGame))+
geom_point(size = 1.2)+
scale_y_continuous(breaks = seq(0, 100, 2))+
geom_hline(yintercept = 1)+
theme_bw()+
#  facet_wrap(~sbrTeam, scales = "free")
facet_wrap(~sbrTeam)
#How does vegas do over time with favorites?
test<-sbr_long_pin%>%
filter(bet == "ml",typeSeason == "Regular Season")%>%
group_by(idGame)%>%
mutate(favs = ifelse(ratio == max(ratio), "Underdog", "Favorite"))%>%
ungroup()%>%
mutate(w_l = ifelse(outcomeGame == "W", 1, 0))%>%
group_by(yearSeason,dateGame, favs)%>%
summarise(wins = sum(w_l),
payout = sum(ratio*w_l))%>%
group_by(yearSeason, favs)%>%
mutate(n = 1:n())%>%
ungroup()
test%>%
#filter(yearSeason == 2020)%>%
ggplot(aes(x = n, y = wins, fill = favs))+
geom_bar(stat = "identity")+
scale_y_continuous(breaks = seq(0, 100, 1))+
theme_bw()+
facet_wrap(~yearSeason)
#Which games were tossups according to ML?
ml_tossups<-sbr_long_pin%>%
filter(bet == "ml", typeSeason == "Regular Season")%>%
select(idGame,locationGame, ratio)%>%
spread(locationGame, ratio)%>%
filter(A == H)
ml_spread_compare<-sbr_long_pin%>%
filter(bet == "ml" | bet == "rl", typeSeason == "Regular Season")%>%
group_by(idGame)%>%
mutate(favs =  ifelse(bet == "ml" & idGame %in% ml_tossups$idGame, "Pickem",
ifelse(ratio == max(ratio) & bet == "ml", "Underdog",
ifelse(ratio != max(ratio) &  bet == "ml", "Favorite",
ifelse(line<0, "Favorite",
ifelse(line>0, "Underdog",
"Pickem"))))))%>%
group_by(idGame, locationGame)%>%
mutate(n = 1:n(),
ratio_ml = ratio[n == 1],
favs_ml = favs[n ==1])%>%
filter(bet != "ml")
disagreement<-
ml_spread_compare%>%
filter(favs!=favs_ml)
#Note that underdogs are on top and favorites are below.
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
#  filter(yearSeason == 2020)%>%
ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
theme_bw()+
scale_color_viridis_c()
#Note that underdogs are on top and favorites are below.
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
#  filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
theme_bw()+
scale_color_viridis_c()
#Note that underdogs are on top and favorites are below.
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
#  filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
theme_bw()
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
ggplot(aes(x = ratio_ml, y = ratio, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
theme_bw()
#Note that underdogs are on top and favorites are below.
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
#  filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
theme_bw()
#Note that underdogs are on top and favorites are below.
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
theme_bw()
#Note that underdogs are on top and favorites are below.
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
#filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~sbrTeam)+
geom_hline(yintercept = 0)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~sbrTeam)+
geom_hline(yintercept = 0)+
geom_vline(yintercept = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~sbrTeam)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
# Load packages
library(tidyverse)
library(janitor)
library(plotly)
library(tidylog)
library(forcats)
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~sbrTeam)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~sbrTeam)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
#scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
#Note that underdogs are on top and favorites are below.
ggplotly(
ml_spread_compare%>%
filter(!(idGame%in%disagreement$idGame))%>%
filter(favs!= "Pickem")%>%
filter(yearSeason == 2020)%>%
#ggplot(aes(x = ratio_ml, y = line, color = ratio, shape = outcomeGame ))+
ggplot(aes(x = ratio_ml, y = line, color = outcomeGame))+
#ggplot(aes(x = ratio_ml, y = ratio, color = line, shape = outcomeGame ))+
geom_point()+
facet_wrap(~yearSeason)+
geom_hline(yintercept = 0)+
geom_vline(xintercept  = 1)+
scale_y_continuous(breaks = seq(-100, 100, 0.5))+
theme_bw()
# scale_color_viridis_c()
)
df_dict_nba_teams<-nba_teams()
library(nbastatR)
df_dict_nba_teams<-nba_teams()
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
modes = "Totals",
measures = "Advanced")
#This isn't working right now... need to figure out later.
teams_tables(teams = c("Brooklyn Nets"),
seasons = 2017, tables = c("splits"),
measures = "Base",
modes = c("PerGame", "Totals"))
teams_tables(teams = c("Brooklyn Nets", "New York Knicks"),
seasons = 2018, tables = c("splits", "shooting"), measures = "Base", modes = c("PerGame", "Totals"))
install.packages(c("AmesHousing", "caret", "h2o", "rsample", "vip"))
# Helper packages
library(dplyr)     # for data manipulation
library(ggplot2)   # for awesome graphics
library(visdat)
# Modeling process packages
library(rsample)   # for resampling procedures
library(caret)     # for resampling and model training
library(h2o)       # for resampling and model training
# Model interpretability packages
library(vip)      # variable importance
# h2o set-up
h2o.no_progress()  # turn off h2o progress bars
h2o.init()         # launch h2o
# h2o set-up
h2o.no_progress()  # turn off h2o progress bars
h2o.init()         # launch h2o
attrition
t<-attrition
View(t)
df <- attrition %>% mutate_if(is.ordered, factor, ordered = FALSE)
# Create training (70%) and test (30%) sets for the
# rsample::attrition data.
set.seed(123)  # for reproducibility
churn_split <- initial_split(df, prop = .7, strata = "Attrition")
churn_train <- training(churn_split)
churn_test  <- testing(churn_split)
# Helper packages
library(dplyr)     # for data manipulation
library(ggplot2)   # for awesome graphics
library(visdat)
# Modeling process packages
library(rsample)   # for resampling procedures
library(caret)     # for resampling and model training
library(h2o)       # for resampling and model training
# Model interpretability packages
library(vip)      # variable importance
# h2o set-up
h2o.no_progress()  # turn off h2o progress bars
h2o.init()         # launch h2o
#Clean Data ---
df <- attrition %>% mutate_if(is.ordered, factor, ordered = FALSE)
# Create training (70%) and test (30%) sets for the
# rsample::attrition data.
set.seed(123)  # for reproducibility
churn_split <- initial_split(df, prop = .7, strata = "Attrition")
churn_train <- training(churn_split)
churn_test  <- testing(churn_split)
