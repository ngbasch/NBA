mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)%>%
mutate(line = ifelse(grepl("PK", line), 0, line),
odds = gsub("PK","", odds))%>%
filter(!is.na(odds))%>%
mutate(line = as.numeric(line),
odds = as.numeric(odds),
ratio = ifelse(odds<0, -100/odds, odds/100),
betting_on = ifelse(bet != "to", sbrTeam,
ifelse(locationGame == "A", "Over", "Under")))
all<-logs%>%
left_join(crosswalk)%>%
select(yearSeason, idTeam, idGame, locationGame, dateGame, sbrTeam, outcomeGame, ptsTeam, plusminusTeam)%>%
group_by(idGame)%>%
mutate(ptsTotal = sum(ptsTeam, na.rm=T))%>%
left_join(clean, by = c("dateGame" = "date", "sbrTeam" = "team"))
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)%>%
mutate(line = ifelse(grepl("PK", line), 0, line),
odds = gsub("PK","", odds))%>%
filter(!is.na(odds))%>%
mutate(line = as.numeric(line),
odds = as.numeric(odds),
ratio = ifelse(odds<0, -100/odds, odds/100),
betting_on = ifelse(bet != "to", sbrTeam,
ifelse(locationGame == "A", "Over", "Under")))
pin%>%
filter(bet == "rl")%>%
ggplot(aes(x = line, y = plusminusTeam, colour = ratio))+
geom_point()+
geom_abline(slope = 1)+
xlim(-60, 60)+
ylim(-60, 60)+
#  geom_smooth(method='lm', formula= y~x)+
scale_color_continuous(type = "viridis")
ggplotly(pin%>%
filter(bet == "to")%>%
filter(yearSeason == 2019)%>%
ggplot(aes(x = line, y = ptsTotal, colour = ratio))+
geom_point()+
geom_abline(slope = 1)+
xlim(150, 300)+
ylim(150, 300)+
#  geom_smooth(method='lm', formula= y~x)+
scale_color_continuous(type = "viridis"))
tabyl(all$tot_PIN_line)
all %>%
select(dateGame, sbrTeam, ml_PIN:tot_BOL_odds)%>%
is.na() %>%
reshape2::melt() %>%
ggplot(aes(Var2, Var1, fill=value)) +
geom_raster() +
coord_flip() +
scale_y_continuous(NULL, expand = c(0, 0)) +
scale_fill_grey(name = "",
labels = c("Present",
"Missing")) +
xlab("Observation") +
theme(axis.text.y  = element_text(size = 4))
TEST<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)
View(TEST)
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
filter(grepl("PIN",var))
View(pin)
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)
tabyl(pin$var)
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+", "", var)),
bet = substr(var, 1, 2))
View(pin)
pin$sportsbook
tabyl(pin$sportsbook
)
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+|_", "", var)),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)%>%
mutate(line = ifelse(grepl("PK", line), 0, line),
odds = gsub("PK","", odds))%>%
filter(!is.na(odds))%>%
mutate(line = as.numeric(line),
odds = as.numeric(odds),
ratio = ifelse(odds<0, -100/odds, odds/100),
betting_on = ifelse(bet != "to", sbrTeam,
ifelse(locationGame == "A", "Over", "Under")))
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+|_", "", var)),
bet = substr(var, 1, 2))
tabyl(pin$sportsbook
)
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+|_", "", var)),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)
View(pin)
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+|_", "", var)),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)%>%
mutate(line = ifelse(grepl("PK", line), 0, line),
odds = gsub("PK","", odds))%>%
filter(!is.na(odds))%>%
mutate(line = as.numeric(line),
odds = as.numeric(odds),
ratio = ifelse(odds<0, -100/odds, odds/100),
betting_on = ifelse(bet != "to", sbrTeam,
ifelse(locationGame == "A", "Over", "Under")))
View(pin)
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl")%>%
group_by(idGame)%>%
summarise(line = mean(abs(line)))
View(pin)
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(abs(line)))
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
mutate(n = 1:n())
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)%>%
mutate(n = 1:n())
ggplot(aes(x = n, y = line, colour = sportsbook))+
geom_line*)
ggplot(aes(x = n, y = line, colour = sportsbook))+
geom_line()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)%>%
mutate(n = 1:n())%>%
ggplot(aes(x = n, y = line, colour = sportsbook))+
geom_line()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)%>%
mutate(n = 1:n())%>%
ggplot(aes(x = n, y = line, colour = sportsbook))+
geom_point()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)%>%
mutate(n = 1:n())%>%
filter(n>9000)%>%
ggplot(aes(x = n, y = line, colour = sportsbook))+
geom_point()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)%>%
mutate(n = 1:n())
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)
test<-pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(sportsbook)%>%
mutate(n = 1:n())
sd(c(3.4, 4, 4.1, 3))
sd(c(3, 3, 3, 3))
# How much do the lines differ? --------------------------------------
test<-pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
mutate(n = 1:n())
# How much do the lines differ? --------------------------------------
test<-pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)
test<-pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))
geom_col()
# How much do the lines differ? --------------------------------------
test<-pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(x = sd))+
geom_col()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(x = sd))+
geom_col()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(y = sd))+
geom_col()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(y = sd))+
geom_hist()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(y = sd))+
geom_histogram()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(sd))+
geom_histogram()
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(sd))+
geom_histogram(bins = 150)
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))
pin<-
all%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+|_", "", var)),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)%>%
mutate(line = ifelse(grepl("PK", line), 0, line),
odds = gsub("PK","", odds))%>%
filter(!is.na(odds))%>%
mutate(line = as.numeric(line),
odds = as.numeric(odds),
ratio = ifelse(odds<0, -100/odds, odds/100),
betting_on = ifelse(bet != "to", sbrTeam,
ifelse(locationGame == "A", "Over", "Under")))
combined_sbr<-bind_rows(raw)
#Read Logs
load("Intermediate/Game Logs/game_logs_10_20.Rda")
#Clean data ------------------------------------------------------------
clean_sb<-combined_sbr%>%
filter(team !="MISSING", opp_team != "MISSING")%>%
select(-ml_time, -rl_time,-tot_time)%>%
mutate(date = as.Date(key, format = "%Y%m%d"))
#Clean data ------------------------------------------------------------
clean_sbr<-combined_sbr%>%
filter(team !="MISSING", opp_team != "MISSING")%>%
select(-ml_time, -rl_time,-tot_time)%>%
mutate(date = as.Date(key, format = "%Y%m%d"))
View(all)
sbr_wide<-logs%>%
left_join(crosswalk)%>%
select(yearSeason, idTeam, idGame, locationGame, dateGame, sbrTeam, outcomeGame, ptsTeam, plusminusTeam)%>%
group_by(idGame)%>%
mutate(ptsTotal = sum(ptsTeam, na.rm=T))%>%
left_join(clean, by = c("dateGame" = "date", "sbrTeam" = "team"))
sbr_long<-
sbr_wide%>%
gather(var, val, ml_PIN:tot_BOL_odds)%>%
#filter(grepl("PIN",var))%>%
mutate(type = ifelse(grepl("ml|odds",var), "odds", "line"),
sportsbook = trimws(gsub("[[:alpha:]][a-z]+|[a-z][[:alpha:]]+|_", "", var)),
bet = substr(var, 1, 2))%>%
select(-var)%>%
spread(type, val)%>%
mutate(line = ifelse(grepl("PK", line), 0, line),
odds = gsub("PK","", odds))%>%
filter(!is.na(odds))%>%
mutate(line = as.numeric(line),
odds = as.numeric(odds),
ratio = ifelse(odds<0, -100/odds, odds/100),
betting_on = ifelse(bet != "to", sbrTeam,
ifelse(locationGame == "A", "Over", "Under")))
View(sbr_long)
View(sbr_long)
getwd()
save(sbr_long, file = "Output/sbr_long.Rda")
sbr_long%>%filter(sportsbook == "PIN")
save(sbr_long%>%filter(sportsbook == "PIN"), file = "Output/sbr_long_pin.Rda")
save((sbr_long%>%filter(sportsbook == "PIN")), file = "Output/sbr_long_pin.Rda")
sbr_long%>%filter(sportsbook == "PIN")
save(sbr_long_pin, file = "Output/sbr_long_pin.Rda")
sbr_long_pin <-sbr_long%>%filter(sportsbook == "PIN")
save(sbr_long_pin, file = "Output/sbr_long_pin.Rda")
View(sbr_long_pin)
View(logs)
?nbastatR
test<-synergy(seasons = 2019, result_types = c("player", "team"), season_types = c("Regular Season"), set_types = c("offensive", "defensive"), categories = c("Transition", "Isolation", "PRBallHandler", "PRRollman", "Postup",  "Spotup", "Handoff", "Cut", "OffScreen", "OffRebound", "Misc"), results = 500, assign_to_environment = TRUE, return_wide = F, return_message = TRUE)
View(test[[5]][[1]])
View(test[[5]][[2]])
test2<-teams_tables(teams = c("Brooklyn Nets", "New York Knicks"),
seasons = 2017:2018, tables = c("splits", "shooting"), measures = "Base", modes = c("PerGame", "Totals"))
View(test2)
team_tables(seasons = 2020, measures = "Advanced")
teams_tables(seasons = 2020, measures = "Advanced")
teams_tables(seasons = 2020, tables = "splits" , measures = "Advanced")
teams_tables(seasons = 2020, tables = "splits" , modes = "PerGame",measures = "Advanced")
teams_tables(seasons = 2019, tables = "splits" , modes = "PerGame",measures = "Advanced")
teams_tables(all_active_teams = TRUE,seasons = 2019, tables = "splits" , modes = "PerGame",measures = "Advanced")
teams_tables(all_active_teams = T,seasons = 2019, tables = "splits" , modes = "PerGame",measures = "Advanced")
df_nba_team_dict
nba_teams()
df_nba_team_dict
df_dict_nba_teams<-nba_teams
df_dict_nba_teams<-nba_teams()
teams_tables(all_active_teams = T,seasons = 2019, tables = "splits" , modes = "PerGame",measures = "Advanced")
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
#modes = "PerGame",
measures = "Advanced")
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
modes = "PerGame",
measures = "Advanced")
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "performance" ,
modes = "PerGame",
measures = "Advanced")
debug(teams_tables)
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "performance" ,
modes = "PerGame",
measures = "Advanced")
View(df_dict_table_names)
View(input_df)
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
#modes = "PerGame",
measures = "Advanced")
undebug(teams_tables)
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
#modes = "PerGame",
measures = "Advanced")
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
modes = "PerGame",
measures = "Advanced")
debug(teams_tableS)
debug(teams_tables)
b
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
modes = "PerGame",
measures = "Advanced")
?.get_team_table_data_safe
df_dict_table_names <- .dictionary_team_tables()
warnings9)
warnings()
View(df_dict_table_names)
View(df_dict_table_names)
View(input_df)
last_n_games
table
?get_team_table_data
??get_team_table_data
teams_tables(teams = "Brooklyn Nets",
#all_active_teams = T,
seasons = 2019,
tables = "splits" ,
modes = "Totals",
measures = "Advanced")
teams_tables(teams = c("Brooklyn Nets"),
seasons = 2017, tables = c("splits"), measures = "Base", modes = c("PerGame", "Totals"))
View(test[[5]][[2]])
library(devtools)
v
devtools::install_github("abresler/nbastatR")
library(nbastatR)
teams_tables(teams = c("Brooklyn Nets"),
seasons = 2017, tables = c("splits"), measures = "Base", modes = c("PerGame", "Totals"))
undebug(teams_tables)
teams_tables(teams = c("Brooklyn Nets"),
seasons = 2017, tables = c("splits"), measures = "Base", modes = c("PerGame", "Totals"))
teams_tables(teams = c("Brooklyn Nets"),
seasons = 2017, tables = c("splits"),
measures = "Base",
modes = c("PerGame", "Totals"))
# How much do the lines differ? --------------------------------------
pin%>%
filter(bet == "rl", locationGame == "H")%>%
group_by(idGame, sportsbook)%>%
summarise(line = mean(line))%>%
group_by(idGame)%>%
summarise(sd = sd(line))%>%
ggplot(aes(sd))+
geom_histogram(bins = 150)
pin%>%
filter(bet == "rl")%>%
ggplot(aes(x = line, y = plusminusTeam, colour = ratio))+
geom_point()+
geom_abline(slope = 1)+
xlim(-60, 60)+
ylim(-60, 60)+
#  geom_smooth(method='lm', formula= y~x)+
scale_color_continuous(type = "viridis")
